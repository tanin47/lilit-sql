# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby2ruby` gem.
# Please instead update this file by running `bin/tapioca gem ruby2ruby`.

# source://ruby2ruby//lib/ruby2ruby.rb#17
Regexp::CODES = T.let(T.unsafe(nil), Hash)

# source://ruby2ruby//lib/ruby2ruby.rb#11
Regexp::ENC_EUC = T.let(T.unsafe(nil), Integer)

# source://ruby2ruby//lib/ruby2ruby.rb#10
Regexp::ENC_NONE = T.let(T.unsafe(nil), Integer)

# source://ruby2ruby//lib/ruby2ruby.rb#12
Regexp::ENC_SJIS = T.let(T.unsafe(nil), Integer)

# source://ruby2ruby//lib/ruby2ruby.rb#13
Regexp::ENC_UTF8 = T.let(T.unsafe(nil), Integer)

# Generate ruby code from a sexp.
#
# source://ruby2ruby//lib/ruby2ruby.rb#33
class Ruby2Ruby < ::SexpProcessor
  # @return [Ruby2Ruby] a new instance of Ruby2Ruby
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#82
  def initialize; end

  # source://ruby2ruby//lib/ruby2ruby.rb#377
  def __var(name); end

  # Generate a post-or-pre conditional loop.
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#1312
  def cond_loop(exp, name); end

  # Utility method to escape something interpolated.
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#1337
  def dthing_escape(type, lit); end

  # Indent all lines of +s+ to the current indent level.
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#1354
  def indent(s); end

  # Wrap appropriate expressions in matching parens.
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#1361
  def parenthesize(exp); end

  # Processors
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#97
  def process_alias(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#103
  def process_and(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#109
  def process_arglist(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#118
  def process_args(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#158
  def process_array(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#621
  def process_array_pat(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#162
  def process_attrasgn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#184
  def process_back_ref(exp); end

  # TODO: figure out how to do rescue and ensure ENTIRELY w/o begin
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#191
  def process_begin(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#205
  def process_block(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#219
  def process_block_pass(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#227
  def process_break(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#239
  def process_call(exp, safe_call = T.unsafe(nil)); end

  # source://ruby2ruby//lib/ruby2ruby.rb#313
  def process_case(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#342
  def process_cdecl(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#353
  def process_class(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#357
  def process_colon2(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#363
  def process_colon3(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#369
  def process_const(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#388
  def process_cvar(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#394
  def process_cvasgn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#400
  def process_cvdecl(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#406
  def process_defined(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#411
  def process_defn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#449
  def process_defs(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#461
  def process_dot2(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#467
  def process_dot3(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#473
  def process_dregx(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#481
  def process_dregx_once(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#485
  def process_dstr(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#489
  def process_dsym(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#493
  def process_dxstr(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#497
  def process_ensure(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#511
  def process_evstr(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#517
  def process_false(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#610
  def process_find_pat(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#521
  def process_flip2(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#527
  def process_flip3(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#533
  def process_for(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#547
  def process_forward_args(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#551
  def process_gasgn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#555
  def process_gvar(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#561
  def process_hash(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#644
  def process_hash_pat(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#588
  def process_iasgn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#681
  def process_if(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#598
  def process_in(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#725
  def process_iter(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#789
  def process_ivar(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#638
  def process_kwrest(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#795
  def process_kwsplat(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#719
  def process_lambda(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#800
  def process_lasgn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#817
  def process_lit(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#827
  def process_lvar(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#833
  def process_masgn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#858
  def process_match(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#864
  def process_match2(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#874
  def process_match3(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#888
  def process_module(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#892
  def process_next(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#903
  def process_nil(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#907
  def process_not(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#912
  def process_nth_ref(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#917
  def process_op_asgn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#935
  def process_op_asgn1(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#946
  def process_op_asgn2(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#957
  def process_op_asgn_and(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#964
  def process_op_asgn_or(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#971
  def process_or(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#985
  def process_postexe(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#677
  def process_preexe(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#989
  def process_redo(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#993
  def process_resbody(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1012
  def process_rescue(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1042
  def process_retry(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1046
  def process_return(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1059
  def process_safe_attrasgn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#309
  def process_safe_call(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1077
  def process_safe_op_asgn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1087
  def process_safe_op_asgn2(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1099
  def process_sclass(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1108
  def process_self(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1112
  def process_splat(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1121
  def process_str(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1126
  def process_super(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1136
  def process_svalue(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1144
  def process_to_ary(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1150
  def process_true(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1154
  def process_undef(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1160
  def process_until(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1164
  def process_valias(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1170
  def process_when(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1185
  def process_while(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1189
  def process_xstr(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1193
  def process_yield(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1207
  def process_zsuper(exp); end

  # Return the appropriate regexp flags for a given numeric code.
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#1373
  def re_opt(options); end

  # Rewriters:
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#1214
  def rewrite_attrasgn(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1224
  def rewrite_call(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1232
  def rewrite_ensure(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1237
  def rewrite_if(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1248
  def rewrite_resbody(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1256
  def rewrite_rescue(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1273
  def rewrite_svalue(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1284
  def rewrite_until(exp); end

  # source://ruby2ruby//lib/ruby2ruby.rb#1295
  def rewrite_while(exp); end

  # Return a splatted symbol for +sym+.
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#1382
  def splat(sym); end

  # Utility method to generate something interpolated.
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#1389
  def util_dthing(type, exp); end

  # Utility method to generate ether a module or class.
  #
  # source://ruby2ruby//lib/ruby2ruby.rb#1412
  def util_module_or_class(exp, is_class = T.unsafe(nil)); end
end

# Nodes that represent assignment and probably need () around them.
#
# TODO: this should be replaced with full precedence support :/
#
# source://ruby2ruby//lib/ruby2ruby.rb#47
Ruby2Ruby::ASSIGN_NODES = T.let(T.unsafe(nil), Array)

# binary operation messages
#
# source://ruby2ruby//lib/ruby2ruby.rb#40
Ruby2Ruby::BINARY = T.let(T.unsafe(nil), Array)

# Some sexp types are OK without parens when appearing as hash values.
# This list can include `:call`s because they're always printed with parens
# around their arguments. For example:
#
#     { :foo => (bar("baz")) } # The outer parens are unnecessary
#     { :foo => bar("baz") }   # This is the normal code style
#
# source://ruby2ruby//lib/ruby2ruby.rb#72
Ruby2Ruby::HASH_VAL_NO_PAREN = T.let(T.unsafe(nil), Array)

# cutoff for one-liners
#
# source://ruby2ruby//lib/ruby2ruby.rb#37
Ruby2Ruby::LINE_LENGTH = T.let(T.unsafe(nil), Integer)

# source://ruby2ruby//lib/ruby2ruby.rb#723
Ruby2Ruby::MUST_BE_CURLY = T.let(T.unsafe(nil), Array)

# source://ruby2ruby//lib/ruby2ruby.rb#34
Ruby2Ruby::VERSION = T.let(T.unsafe(nil), String)
